<?php
// membuat database wrapper
class Database {
    private $host = DB_HOST;
    private $user = DB_USER;
    private $pass = DB_PASS;
    private $db_name = DB_NAME;

    //variabel koneksi
    private $dbh;
    private $error;
    private $stmt;

    //lakukan koneksi database dengan construct;
    public function __construct(){
        $dsn = 'mysql:host=' . $this->host . ';dbname =' . $this->db_name;

        //option, berfungsi untuk mengoptimasi database
        //PDO::ATTR_PERSISTENT = untuk membuat database terjaga terus
        //PDO::ATTR_ERRORMODE = untuk kode errornya
        $option = [
            PDO::ATTR_PERSISTENT => true,
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
        ];

        //block try-catch
        try {
            $this->dbh = new PDO($dsn, $this->user, $this->pass, $option);
        }catch(PDOException $e) { //masukkan ke variabel $e untuk membuat error
            // die($e->getMessage());
            $this->error = $ex->getMessage();
            echo $this->error;

        }
     }

     //membuat function query = untuk menjalankan query
     public function query($query)
     {
        $this->stmt = $this->dbh->prepare($query);
     }

     //membuat fungsi binding data , siapa tau didalam querynya ada warenya
     public function bind($param, $value, $type = null)
     {
        if (is_null($type))
         {
          switch (true) {
            case is_int($value):
                $type = PDO::PARAM_INT;
                break;
            case is_bool($value):
                $type = PDO::PARAM_BOOL;
                break;
            case is_null($value):
                $type = PDO::PARAM_NULL;
                break;
            default:
                $type = PDO::PARAM_STR;
                break;
          }
        }

        //ketika mengecek data pada database where 1 = maka akan di bind ke int param
        // untuk menghindari sql ijection
        $this->stmt->bindValue($param, $value, $type);
     }

     public function execute()
     {
        $this->stmt->execute();
     }
     // jika memanggil data banyak pda database 
     public function resultSet() 
     {
        $this->execute();
        return $this->stmt->fetchAll(PDO::FETCH_ASSOC);
     }
     //jika memanggil database satu persatu
     public function single()
     {
        $this->execute();
        return $this->stmt->fetc(PDO::FETCH_ASSOC);
     }

}
